openapi: 3.0.3
info:
  title: "Lab Manager API"
  description: "An API designed to interact with a lab notebook."
  version: 1.0.0
servers:
  - url: "/api"

components:
  schemas:
    Entity:
      type: "object"
      required:
        - ID
      properties:
        ID:
          type: "string"
        name:
          type: "string"
        parent:
          type: "string"
        user:
          type: "string"
        description:
          type: "string"
        comments:
          type: "array"
        children:
          type: "array"

    Comment:
      type: "object"
      required:
        - content
      properties:
        content:
          type: "string"
          description: "Text of the comment"


  parameters:
    ID:
      name: "ID"
      description: "ID of the entity to get"
      in: path
      required: true
      schema:
        type: "string"

    imageName:
      name: "imageName"
      description: "Name of the image to get"
      in: path
      required: true
      schema:
        type: "string"

    commentID:
        name: "commentID"
        description: "ID of the comment to get"
        in: path
        required: true
        schema:
            type: "string"

    query:
      name: "query"
      description: "Query to search for"
      in: query
      required: false
      schema:
        type: "string"

paths:
  /entities:
    get:
      operationId: "entities.read_all"
      tags:
        - Entities
      summary: "Creates the complete structure of the whole lab notebook."
      responses:
        "200":
          description: "Successfully created lab entries"

    post:
      summary: "Adds a new entity to the lab notebook"
      operationId: "entities.add_entity"
      tags:
        - Entities
      requestBody:
        content:
          application/json:
              schema:
                type: "object"
                properties:
                  name:
                    type: "string"
                  user:
                    type: "string"
                  type:
                    type: "string"
                  parent:
                    type: "string"

      responses:
        "200":
          description: "Successfully added entity"
        "400":
          description: "Invalid entity"
        "404":
          description: "Parent not found"

  /entities/{ID}:
    get:
      operationId: "entities.read_one"
      tags:
        - Entities
      summary: "Read the entity with the given ID"
      parameters:
        - $ref: "#/components/parameters/ID"
        - in: query
          name: "name_only"
          schema:
            type: "boolean"
          description: "If true, only the name of the entity is returned"

      responses:
        "200":
            description: "Successfully read entity"
        "404":
            description: "Entity not found"

    put:
      operationId: "entities.add_comment"
      tags:
        - Entities
        - Comments
      summary: "Add a comment to the entity with the given ID"
      parameters:
        - $ref: "#/components/parameters/ID"
        - in: query
          name: "username"
          schema:
            type: "string"
          description: "Username of the user adding the comment, if left empty the user of the entity is used"
        - in: query
          name: "HTML"
          schema:
            type: "boolean"
          description: "If true, the comment is interpreted as HTML and converted to markdown"

      responses:
        "200":
            description: "Successfully added comment"
        "404":
            description: "Entity not found"
      requestBody:
        description: "Comment to add"
        required: true
        content:
          application/json:
            schema:
              x-body-name: "comment"
              $ref: "#/components/schemas/Comment"

  /entities/{ID}/{commentID}:
    get:
      operationId: "entities.read_comment"
      tags:
        - Entities
        - Comments
      summary: "Read the comment with the given ID, mainly used to get entity images"
      parameters:
        - $ref: "#/components/parameters/ID"
        - $ref: "#/components/parameters/commentID"
      responses:
        "200":
          description: "Successfully read comment"
        "404":
          description: "Comment not found"

  /entities/{ID}/info:
    get:
      operationId: "entities.read_entity_info"
      tags:
          - Entities
          - Info
      summary: "Returns the rank and number of children this entity has."
      parameters:
        - $ref: "#/components/parameters/ID"
      responses:
        "200":
          description: "Successfully read entity info"
        "404":
          description: "Entity not found"

  /entities/{ID}/tree:
    get:
      operationId: "entities.generate_tree"
      tags:
        - Entities
        - Info
      summary: "Returns a tree representation of the children of this entity."
      parameters:
        - $ref: "#/components/parameters/ID"
      responses:
        "200":
          description: "Successfully read entity info"
        "404":
          description: "Entity not found"

  /entities/{ID}/data_suggestions:
    get:
      operationId: "entities.get_data_suggestions"
      tags:
        - Entities
        - Suggestions
      summary: "Returns a dictionary of suggestions for a specified query. If no query is specified,
       all suggestions are returned."
      parameters:
        - $ref: "#/components/parameters/ID"
        - $ref: "#/components/parameters/query"
      responses:
        "200":
          description: "Successfully read entity info"
        "404":
          description: "Entity not found"


  /entities/{ID}/{imageName}:
    get:
      operationId: "entities.read_image"
      tags:
        - Entities
      summary: "Returns the image of the entity with the given ID"
      parameters:
        - $ref: "#/components/parameters/ID"
        - $ref: "#/components/parameters/imageName"
      responses:
        "200":
            description: "Successfully read entity image"
        "404":
            description: "Image not found"

  /properties/users:
    get:
      operationId: "entities.get_users"
      tags:
        - Properties
      summary: "Returns all users present in the notebook"
      responses:
        "200":
          description: "Successfully read users"

  /properties/types:
    get:
      operationId: "entities.get_types"
      tags:
        - Properties
      summary: "Returns all types present in the notebook"
      responses:
        "200":
          description: "Successfully read types"

  /properties/parents:
    get:
      operationId: "entities.get_possible_parents"
      tags:
        - Properties
      summary: "Returns all the possible parents in the notebook"
      responses:
        "200":
          description: "Successfully read parents"

  /testing/indices:
    get:
      operationId: "entities.get_indices"
      tags:
        - Testing
      summary: "Returns all indices for testing purposes"
      responses:
        "200":
          description: "Call used exclusively for testing purposes. Returns all indices so they can be inspected"

  /testing/fake_mentions:
    get:
      operationId: "entities.get_fake_mentions"
      tags:
        - Testing
      summary: "Returns a fake list of mentions for testing porpuses"
      responses:
        "200":
          description: "Call used exclusively for testing purposes. Returns a fake list of entities"
